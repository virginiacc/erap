{"version":3,"sources":["StateFilter.js","TribeFilter.js","Filters.js","ResultsRow.js","Results.js","CityFilter.js","CountyFilter.js","App.js","reportWebVitals.js","index.js"],"names":["StateFilter","props","htmlFor","options","states","onChange","selection","handler","value","isClearable","state","TribeFilter","className","tribeOptions","Filters","useState","setState","setCounty","setCity","setTribe","ResultsRow","item","href","rel","target","Results","tribeResult","vals","data","county","city","filter","locality","name","tribe","tribes","sort","a","b","length","map","index","CityFilter","cities","grantees","CountyFilter","counties","geographicData","granteeStates","granteeTerritories","granteeTribes","label","App","showFilters","setShowFilters","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.def8a972.chunk.js","sourcesContent":["import states from \"./data/states.json\";\nimport Select from 'react-select';\n\nconst StateFilter = ( props ) => {\n\tfunction handleChange( selection ) {\n    props.handler( selection ? selection.value: ''  );\n  }\n\t\n\treturn (\n\t \t<div>\n    \t<label htmlFor=\"state-select\">What state or territory do you live in?</label>\n\t\t\t<Select options={ states }\n          \t\tonChange={ handleChange }\n          \t\tkey={ props.state }\n          \t\tisClearable={ true } />\n    \t</div>\n  \t);\n};\n\nexport default StateFilter;","import Select from 'react-select';\n\nconst TribeFilter = ( props ) => {\n  function handleChange( selection ) {\n    props.handler( selection ? selection.value : ''  );\n  }\n  \n  return (\n    <div className=\"tribeSelect\">\n      <label>Are you a member of any of the following tribes or Tribally Designated Housing Entities (TDHEs)?</label>\n      <Select options={ props.tribeOptions }\n              onChange={ handleChange }\n              isClearable={ true }/>\n    </div>\n  );\n};\n\nexport default TribeFilter;","import { useState } from 'react';\nimport StateFilter from \"./StateFilter.js\";\nimport TribeStatusFilter from \"./TribeStatusFilter.js\";\nimport TribeFilter from \"./TribeFilter.js\";\n\nfunction Filters( props ) { \n\n  const [ tribalStatus, setTribalStatus ] = useState( '' );\n\n  function handleTribeRadioSelection( value ) {\n    setTribalStatus( value );\n    if ( value === 'no' ) {\n      props.setTribe( '' );\n    }\n  }\n\n  function updateFormState(state) {\n    props.setState(state)\n    props.setCounty('')\n    props.setCity('')\n  }\n\n\n  return (\n    <div className=\"filters\">\n      <StateFilter handler={ updateFormState }/>\n      \n      <TribeFilter tribeOptions={ props.tribeOptions }\n                     handler={ props.setTribe }/>\n      \n    </div>\n  );\n}\n\nexport default Filters;\n","const ResultsRow = ( props ) => {\n  return (\n\t\t<tr>\n\t\t\t<td>{ props.item['locality'] }</td>\n\t\t\t<td>{ props.item['recipient-name'] }</td>\n\t\t\t<td className=\"url-col\">\n\t\t\t\t<a href={ props.item['URL'] }\n\t\t\t\t\t rel=\"noreferrer\"\n\t\t\t\t\t target=\"_blank\">\n\t\t\t\t\t{ props.item['URL'] }\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t</tr>\t\t\n \t);\n};\n\nexport default ResultsRow;","import ResultsRow from \"./ResultsRow.js\";\n\nconst Results = ( props ) => {\n    let vals = props.data;\n    if ( props.county || props.city ) {\n      vals = vals.filter(\n        item => (\n          item['state-territory'] === props.state &&\n          (item.locality === 'State' ||\n           item.locality === 'County' && item.name === props.county ||\n           item.locality === 'City' && item.name === props.city)\n        )\n      )\n    } else if ( props.state ) {\n      vals = vals.filter(\n        item => (\n          item['state-territory'] === props.state \n          // && item.locality === 'State'\n        )\n      )\n    }\n    let tribeResult;\n    if ( props.tribe ) {\n      tribeResult = props.tribes.filter(\n        item => (\n          item.name === props.tribe\n        )\n      )\n    }\n    \n    vals.sort(\n      (a, b) => ( a.locality > b.locality ) ? 1 : -1\n    );\n    if (tribeResult ) {\n      if (props.state) {\n        vals = [...tribeResult, ...vals]\n      } else {\n        vals = tribeResult;\n      }\n    }\n    if ( vals.length ) {\n      return (\n        <div className=\"results\">\n          {/* <p>You may be eligible for { vals.length } {vals.length > 1 ? 'programs' : 'program'}.</p> */}\n          <table>\n            <thead>\n              <tr>\n                <th>Type</th>\n                <th>Name</th>\n                <th className=\"url-col\">URL</th>\n              </tr>\n            </thead>\n            <tbody>\n              { vals.map( ( item, index ) => (\n                <ResultsRow item={ item } key={ index }/>\n              ) ) }\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n    return ( <div className=\"results\">No results</div> )\n  \n};\n\n\n\nexport default Results;","import Select from 'react-select'\n\nconst CityFilter = ( props ) => {\n  function handleChange( selection ) {\n    props.handler( selection ? selection.value : '' );\n  }\n\tconst cities = props.grantees.filter(\n\t\titem => item.locality === 'City'\n\t).map( item => ( { 'label': item.name, 'value': item.name } ) \n\t).sort(\n      (a, b) => ( a.name > b.name ) ? -1 : 1\n   );\n  if ( cities.length ) {\n  \t return (\n  \t \t<div>\n\t\t    <label htmlFor=\"city-select\">Do you live in any of these cities?</label>\n\t\t    <Select options={ cities }\n                onChange={ handleChange }\n                key={ props.state }\n                isClearable={ true } />\n\t    </div>\n\t  );\n  }\n\n  return ( null );\n};\n\nexport default CityFilter;","import Select from 'react-select';\n\nconst CountyFilter = ( props ) => {\n\tfunction handleChange( selection ) {\n    props.handler( selection ? selection.value: ''  );\n  }\n\tif (props.state) {\n\t\tconst counties = props.grantees.filter(\n\t\t\titem => item.locality === 'County'\n\t\t).map( item => ( { 'label': item.name, 'value': item.name } ) ).sort(\n      (a, b) => ( a.name > b.name ) ? -1 : 1\n   );\n\t\tif ( counties.length ) {\n\t  \t return (\n\t  \t \t<div>\n\t\t    \t<label htmlFor=\"county-select\">Do you live in any of these counties?</label>\n\t\t\t\t\t<Select options={ counties }\n                  onChange={ handleChange }\n                  key={ props.state }\n                  isClearable={ true } />\n\t\t    </div>\n\t\t  );\n\t  }\n\t}\n  return ( null );\n};\n\nexport default CountyFilter;","import './App.css';\nimport { useState } from 'react';\nimport granteeStates from \"./data/grantees-states.json\";\nimport granteeTribes from \"./data/grantees-tribes.json\";\nimport granteeTerritories from \"./data/grantees-territories.json\";\nimport Filters from \"./Filters.js\";\nimport Results from \"./Results.js\";\nimport CityFilter from \"./CityFilter.js\";\nimport CountyFilter from \"./CountyFilter.js\";\n\nconst geographicData = [...granteeStates, ...granteeTerritories];\n\nconst tribeOptions = granteeTribes.map(\n  item => ( { value: item.name, label: item.name } )\n)\n\nfunction App() {\n  const [ state, setState ] = useState( '' );\n  const [ county, setCounty ] = useState( '' );\n  const [ city, setCity ] = useState( '' );\n  const [ tribe, setTribe ] = useState( '' );\n  const [ showFilters, setShowFilters ] = useState( false )\n  let grantees = [];\n  if ( state ) {\n    grantees = geographicData.filter(\n      item => item[\"state-territory\"] === state \n    )\n  }\n\n  function toggleFilters() {\n    setShowFilters(!showFilters);\n  }\n\n  return (\n    <div className=\"App\">\n      <Filters data={ geographicData }\n               tribeOptions={ tribeOptions }\n               state={ state }\n               setCity={ setCity }\n               setCounty={ setCounty }\n               setState={ setState }\n               setTribe={ setTribe }/>\n\n      { state &&\n        <div className=\"secondaryFilters\">\n          {grantees.length > 1 &&\n            <div>\n              <p>There are { grantees.length } programs in your state.</p>\n              <p><a onClick={ toggleFilters }>Filter by county or city.</a></p>\n            </div>\n          }\n          { showFilters &&\n            <div>\n          <CountyFilter grantees={ grantees }\n                        state={ state }\n                        county={ county }\n                        handler={ setCounty }/>\n          <CityFilter grantees={ grantees }\n                      state={ state }\n                      handler={ setCity }\n                      city={ city }/>\n          </div>\n          }\n          \n        </div>\n      }\n      <Results state={ state } \n               county={ county } \n               city={ city } \n               tribe={ tribe }\n               data={ geographicData }\n               tribes={ granteeTribes }/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}