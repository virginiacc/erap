{"version":3,"sources":["CountyFilter.js","StateFilter.js","TribeFilter.js","Filters.js","ResultsRow.js","Results.js","App.js","reportWebVitals.js","index.js"],"names":["CountyFilter","props","state","countySet","Set","grantees","forEach","item","locality","add","name","counties","map","sort","length","className","htmlFor","class","options","onChange","selection","handler","value","isClearable","placeholder","StateFilter","states","TribeFilter","tribeOptions","Filters","setState","setCounty","county","setTribe","ResultsRow","href","rel","target","Results","tribeResult","vals","data","console","log","filter","includes","tribe","tribes","a","b","index","geographicData","granteeStates","granteeTerritories","granteeTribes","label","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06e0a094.chunk.js","sourcesContent":["import Select from 'react-select';\n\nconst CountyFilter = ( props ) => {\n\tfunction handleChange( selection ) {\n    props.handler( selection ? selection.value: ''  );\n  }\n\tif (props.state) {\n\t\tlet countySet = new Set();\n\t\tprops.grantees.forEach( (item) => {\n\t\t\t\tif ( item.locality === 'County' ) {\n\t\t\t\t\t countySet.add(item.name)\n\t\t\t\t} else if ( item.locality === 'City' ) {\n\t\t\t\t\tif ( item.counties ) {\n\t\t\t\t\t\titem.counties.forEach(countySet.add, countySet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\t\tlet counties = [...countySet];\n\t\tcounties = counties.map( item => ( \n\t\t\t{ 'label': item, 'value': item } \n\t\t) ).sort();\n\n\t\tif ( counties.length ) {\n\t  \t return (\n\t  \t \t<div className=\"m-form-field\">\n\t\t    \t<label className=\"a-label a-label__heading\" htmlFor=\"county-select\">\n\t\t    \t\tNarrow results by county (optional)\n\t\t    \t\t<small class=\"a-label_helper a-label_helper__block\">\n         \t\t\tIf your county is not listed below, you may still qualify for other programs.\n        \t\t</small>\n\t\t    \t</label>\n\t\t\t\t\t<Select options={ counties }\n                  onChange={ handleChange }\n                  key={ props.state }\n                  isClearable={ true }\n                  placeholder={ 'Show results for all counties' } />\n\t\t    </div>\n\t\t  );\n\t  }\n\t}\n  return ( null );\n};\n\nexport default CountyFilter;","import states from \"./data/states.json\";\nimport Select from 'react-select';\n\nconst StateFilter = ( props ) => {\n\tfunction handleChange( selection ) {\n    props.handler( selection ? selection.value: ''  );\n  }\n\t\n\treturn (\n\t \t<div className=\"m-form-field\">\n    \t<label className=\"a-label a-label__heading\" \n    \t\t     htmlFor=\"state-select\">\n    \t\tYour state or territory\n    \t</label>\n\t\t\t<Select options={ states }\n          \t\tonChange={ handleChange }\n          \t\tkey={ props.state }\n          \t\tisClearable={ true }\n          \t\tplaceholder={ 'Select your state or territory' } />\n    \t</div>\n  \t);\n};\n\nexport default StateFilter;\n\n","import Select from 'react-select';\n\nconst TribeFilter = ( props ) => {\n  function handleChange( selection ) {\n    props.handler( selection ? selection.value : ''  );\n  }\n  \n  return (\n    <div className=\"block block__sub block__border-top block__padded-top u-mb0\">\n    <div className=\"tribeSelect m-form-field\">\n      <label className=\"a-label a-label__heading\">\n        Your tribe or Tribally Designated Housing Entity (if applicable)\n        <small class=\"a-label_helper a-label_helper__block\">\n          Only tribes and TDHEs with rental assistance programs will be listed.\n        </small>\n      </label>\n\n      <Select options={ props.tribeOptions }\n              onChange={ handleChange }\n              isClearable={ true }\n              placeholder={ 'Select your tribe or TDHE' }/>\n    </div>\n    </div>\n  );\n};\n\nexport default TribeFilter;","import { useState } from 'react';\nimport CountyFilter from \"./CountyFilter.js\";\nimport StateFilter from \"./StateFilter.js\";\nimport TribeFilter from \"./TribeFilter.js\";\n\nfunction Filters( props ) { \n\n  function updateFormState(state) {\n    props.setState(state)\n    props.setCounty('')\n  }\n\n  return (\n    <div className=\"filters o-well\">\n      <h1 className=\"h3\">Find rental assistance programs for...</h1>\n      <StateFilter handler={ updateFormState }/>\n\n      { props.grantees.length > 10 &&\n        <CountyFilter grantees={props.grantees}\n                      state={ props.state }\n                      county={ props.county }\n                      handler={ props.setCounty }/>\n      }\n      \n      <TribeFilter tribeOptions={ props.tribeOptions }\n                   handler={ props.setTribe }/>\n      \n    </div>\n  );\n}\n\nexport default Filters;\n","const ResultsRow = ( props ) => {\n  return (\n\t\t<div className=\"results-row block block__sub block__border-bottom block__padded-bottom\">\n\t\t\t<h2>{ props.item['recipient-name'] }</h2>\n\t\t\t{ props.item['URL'] &&\n\t\t\t\t<div className=\"results-row_item results-row_item__url\">\n\t\t\t\t<h3 className=\"h5\">Website:&nbsp;</h3>\n\t\t\t\t<a href={ props.item['URL'] }\n\t\t\t\t\t rel=\"noreferrer\"\n\t\t\t\t\t target=\"_blank\"\n\t\t\t\t\t className=\"program-link\">\n\t\t\t\t\t{ props.item['URL'] }\n\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t{ props.item['assistance-phone-number'] &&\n\t\t\t\t<div className=\"results-row_item\">\n\t\t\t\t<h3 className=\"h5\">Phone:&nbsp;</h3>\n\t\t\t\t<span>{ props.item['assistance-phone-number'] }</span>\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t\t<div className=\"results-row_item\">\n\t\t\t\t<h3 className=\"h5\">Program Type:&nbsp;</h3>\n\t\t\t\t<span>{ props.item['locality'] }</span>\n\t\t\t</div>\n\t\t</div>\t\t\n \t);\n};\n\nexport default ResultsRow;","import ResultsRow from \"./ResultsRow.js\";\n\nconst Results = ( props ) => {\n    let vals = props.data;\n    console.log(props)\n    if ( props.county ) {\n      vals = vals.filter(\n        item => (\n          item.locality === 'State' ||\n          ( item.locality === 'County' && item.name === props.county ) ||\n          ( item.locality === 'City' && item.county && item.county.includes(props.county)) )\n      )\n    }\n    let tribeResult;\n    if ( props.tribe ) {\n      tribeResult = props.tribes.filter(\n        item => (\n          item['recipient-name'] === props.tribe\n        )\n      )\n    }\n    if (props.state) {\n      vals.sort(\n        (a, b) => ( a.locality > b.locality ) ? 1 : -1\n      );\n    }\n    \n    if (tribeResult ) {\n      if (props.state) {\n        vals = [...tribeResult, ...vals]\n      } else {\n        vals = tribeResult;\n      }\n    }\n    if ( vals.length ) {\n      return (\n        <div className=\"results\">\n          <div class=\"m-notification\n                      m-notification__visible\n                      m-notification__success\n                      u-mb30\">\n            <div class=\"m-notification_content\">\n              <div class=\"h4 m-notification_message\">\n                Showing { vals.length } rental assistance {vals.length > 1 ? 'programs' : 'program'} { (props.state || props.tribe) && <span>that {vals.length > 1 ? 'match' : 'matches'} your search</span> }\n              </div>\n            </div>\n          </div>      \n            { vals.map( ( item, index ) => (\n              <ResultsRow item={ item } key={ index }/>\n            ) ) } \n        </div>\n      );\n    }\n    return ( <div className=\"results\">No results</div> )\n  \n};\n\nexport default Results;","import './App.css';\nimport { useState } from 'react';\nimport granteeStates from \"./data/grantees-states.json\";\nimport granteeTribes from \"./data/grantees-tribes.json\";\nimport granteeTerritories from \"./data/grantees-territories.json\";\nimport Filters from \"./Filters.js\";\nimport Results from \"./Results.js\";\n\nconst geographicData = [...granteeStates, ...granteeTerritories];\n\nconst tribeOptions = granteeTribes.map(\n  item => ( { value: item['recipient-name'], label: item['recipient-name'] } )\n)\n\nfunction App() {\n  const [ state, setState ] = useState( '' );\n  const [ county, setCounty ] = useState( '' );\n  const [ tribe, setTribe ] = useState( '' );\n  let grantees = [];\n  if ( state ) {\n    grantees = geographicData.filter(\n      item => ( item['state-territory'] === state ) \n    ) \n  }\n\n  return (\n    <div className=\"App\">\n      <Filters tribeOptions={ tribeOptions }\n               state={ state }\n               county={ county }\n               grantees={ grantees }\n               setCounty={ setCounty }\n               setState={ setState }\n               setTribe={ setTribe }/>\n      <Results state={ state } \n               county={ county } \n               tribe={ tribe }\n               data={ state ? grantees : [...geographicData, ...granteeTribes] }\n               tribes={ granteeTribes }/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}