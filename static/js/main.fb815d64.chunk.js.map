{"version":3,"sources":["CityFilter.js","CountyFilter.js","Filters.js","ResultsRow.js","Results.js","App.js","reportWebVitals.js","index.js"],"names":["CityFilter","props","state","cities","grantees","filter","item","locality","map","name","length","htmlFor","options","onChange","selection","handler","value","isClearable","CountyFilter","counties","Filters","useState","selectedState","setSelectedState","county","selectedCounty","setSelectedCounty","city","selectedCity","setSelectedCity","tribalStatus","setTribalStatus","tribe","selectedTribe","setSelectedTribe","handleTribeRadioSelection","event","target","data","className","states","type","id","tribeOptions","onClick","onSubmit","ResultsRow","href","rel","Results","showResults","tribeResult","vals","console","log","tribes","sort","a","b","index","geographicData","granteeStates","granteeTerritories","granteeTribes","label","App","setState","setCounty","setCity","setTribe","setShowResults","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb815d64.chunk.js","sourcesContent":["import Select from 'react-select'\n\nconst CityFilter = ( props ) => {\n  function handleChange( selection ) {\n    props.handler( selection? selection.value : '' );\n  }\n  if (props.state) {\n\t\tconst cities = props.grantees.filter(\n\t\t\titem => item.locality === 'City'\n\t\t\t).map(item => ({'label': item.name, 'value': item.name}) )\n\t  if ( cities.length ) {\n\t  \t return (\n\t  \t \t<div>\n\t\t\t    <label htmlFor=\"city-select\">Do you live in any of these cities?</label>\n\t\t\t    <Select options={ cities }\n                  onChange={ handleChange }\n                  key={ props.state }\n                  isClearable={ true } />\n\t\t    </div>\n\t\t  );\n\t  }\n\t}\n  return (null);\n};\n\nexport default CityFilter;","import Select from 'react-select';\n\nconst CountyFilter = ( props ) => {\n\tfunction handleChange( selection ) {\n    props.handler( selection ? selection.value: ''  );\n  }\n\tif (props.state) {\n\t\tconst counties = props.grantees.filter(\n\t\t\titem => item.locality === 'County'\n\t\t\t).map(item => ({'label': item.name, 'value': item.name}))\n\t\tif ( counties.length ) {\n\t  \t return (\n\t  \t \t<div>\n\t\t    \t<label htmlFor=\"county-select\">Do you live in any of these counties?</label>\n\t\t\t\t\t<Select options={ counties }\n                  onChange={ handleChange }\n                  key={ props.state }\n                  isClearable={ true } />\n\t\t    </div>\n\t\t  );\n\t  }\n\t}\n  return (null);\n};\n\nexport default CountyFilter;","import { useState } from 'react';\nimport states from \"./data/states.json\";\nimport CityFilter from \"./CityFilter.js\";\nimport CountyFilter from \"./CountyFilter.js\";\nimport Select from 'react-select'\n\nfunction Filters( props ) {\n  const [ selectedState, setSelectedState ] = useState( props.state );\n  const [ selectedCounty, setSelectedCounty ] = useState( props.county );\n  const [ selectedCity, setSelectedCity ] = useState( props.city );\n  const [ tribalStatus, setTribalStatus ] = useState( '' );\n  const [ selectedTribe, setSelectedTribe ] = useState( props.tribe );\n\n  let grantees = [];\n  if ( selectedState ) {\n    grantees = props.data.filter(\n      item => item[\"state-territory\"] === selectedState \n    )\n  }\n\n  function updateFormState( selection ) {\n    setSelectedState( selection ? selection.value : '' );\n    setSelectedCounty( '' );\n    setSelectedCity( '' );\n  }\n\n  function handleTribeSelection( selection ) {\n    setSelectedTribe( selection ? selection.value : '')\n  }\n\n  function handleTribeRadioSelection( event ) {\n    setTribalStatus( event.target.value );\n  }\n\n  function updateAppState() {\n    props.onSubmit(\n      selectedState,\n      selectedCounty,\n      selectedCity,\n      selectedTribe\n    )\n  }\n\n  // const msg = grantees.length > 1 ? \n  //             `There are ${ grantees.length } programs in your state. \n  //              Help us narrow down the ones that may be relevant to you.` : \n  //             'There is 1 program in your state.';\n\n  return (\n    <div className=\"filters\">\n      <label htmlFor=\"state-select\">What state or territory do you live in?</label>\n      <Select options={ states }\n              onChange={ updateFormState }\n              isClearable={true} />\n      { selectedState &&\n        <div>\n          {grantees.length > 1 &&\n              <p>There are { grantees.length } programs in your state. \n               Help us narrow down the ones that may be relevant to you.</p>\n          }\n          <CountyFilter grantees={ grantees }\n                        state={ selectedState }\n                        county={ selectedCounty }\n                        handler={ setSelectedCounty }/>\n          <CityFilter grantees={ grantees }\n                      state={ selectedState }\n                      handler={ setSelectedCity }\n                      city={ selectedCity }/>\n          <div className=\"tribeFilters\">\n            <label className=\"block\">Are you a Tribal member or living on Tribal lands?</label>\n            <div>\n            <input type=\"radio\"\n                   id=\"tribalAffiliationYes\" \n                   name=\"tribalAffiliation\" \n                   value=\"yes\" \n                   onChange={ handleTribeRadioSelection }/>\n            <label className=\"inline\" htmlFor=\"tribalAffiliationYes\">Yes</label>\n            </div>\n            <div>\n            <input type=\"radio\" \n                   id=\"tribalAffiliationNo\" \n                   name=\"tribalAffiliation\" \n                   value=\"no\"\n                   onChange={ handleTribeRadioSelection }/>\n            <label className=\"inline\"  htmlFor=\"tribalAffiliationNo\">No</label>\n            </div>\n            { tribalStatus === 'yes' &&\n              <div className=\"tribeSelect\">\n              <label>What is your Tribe or Tribally Designated Housing Entity (TDHE)?</label>\n              <Select options={ props.tribeOptions }\n                      onChange={ handleTribeSelection }\n                      isClearable={ true }/>\n              </div>\n            }\n\n          </div>\n        </div>\n      }\n      <button onClick={ updateAppState }>Search</button>\n    </div>\n  );\n}\n\nexport default Filters;\n","const ResultsRow = ( props ) => {\n  return (\n\t\t<tr>\n\t\t\t<td>{ props.item['locality'] }</td>\n\t\t\t<td>{ props.item['recipient-name'] }</td>\n\t\t\t<td className=\"url-col\">\n\t\t\t\t<a href={ props.item['URL'] }\n\t\t\t\t\t rel=\"noreferrer\"\n\t\t\t\t\t target=\"_blank\">\n\t\t\t\t\t{ props.item['URL'] }\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t</tr>\t\t\n \t);\n};\n\nexport default ResultsRow;","import ResultsRow from \"./ResultsRow.js\";\n\nconst Results = ( props ) => {\n  if (props.showResults) {\n    let vals = props.data;\n    if ( props.county || props.city ) {\n      vals = vals.filter(\n        item => (\n          item['state-territory'] === props.state &&\n          (item.locality === 'State' ||\n           item.locality === 'County' && item.name === props.county ||\n           item.locality === 'City' && item.name === props.city)\n        )\n      )\n    } else if ( props.state ) {\n      vals = vals.filter(\n        item => (\n          item['state-territory'] === props.state\n        )\n      )\n    }\n    console.log(vals)\n    let tribeResult;\n    if ( props.tribe ) {\n      tribeResult = props.tribes.filter(\n        item => (\n          item.name === props.tribe\n        )\n      )\n    }\n    if (tribeResult) {\n      vals = [...vals, ...tribeResult]\n    }\n    vals.sort(\n      (a, b) => ( a.locality > b.locality ) ? 1 : -1\n    );\n    if ( vals.length ) {\n      return (\n        <div className=\"results\">\n          <p>You may be eligible for { vals.length } {vals.length > 1 ? 'programs' : 'program'}.</p>\n          <table>\n            <thead>\n              <tr>\n                <th>Type</th>\n                <th>Name</th>\n                <th className=\"url-col\">URL</th>\n              </tr>\n            </thead>\n            <tbody>\n              { vals.map( ( item, index ) => (\n                <ResultsRow item={ item } key={ index }/>\n              ) ) }\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n    return (<div className=\"results\">No results</div>)\n  }\n\treturn (null);\n};\n\nexport default Results;","import './App.css';\nimport { useState } from 'react';\nimport granteeStates from \"./data/grantees-states.json\";\nimport granteeTribes from \"./data/grantees-tribes.json\";\nimport granteeTerritories from \"./data/grantees-territories.json\";\nimport Filters from \"./Filters.js\";\nimport Results from \"./Results.js\";\n\nconst geographicData = [...granteeStates, ...granteeTerritories];\nconst tribeOptions = granteeTribes.map(\n  item => ( { value: item.name, label: item.name } )\n)\n\nfunction App() {\n  const [ state, setState ] = useState( '' );\n  const [ county, setCounty ] = useState( '' );\n  const [ city, setCity ] = useState( '' );\n  const [ tribe, setTribe ] = useState( '' );\n  const [ showResults, setShowResults ] = useState( false );\n\n  function updateAppState(state, county, city, tribe) {\n    setState( state );\n    setCounty( county );\n    setCity( city );\n    setTribe( tribe );\n    setShowResults( true );\n  }\n\n  return (\n    <div className=\"App\">\n      <Filters data={ geographicData }\n                  tribeOptions={ tribeOptions }\n                  onSubmit={ updateAppState }\n                  state={ state }\n                  county={ county }\n                  city={ city }/>\n      <Results state={ state } \n               county={county} \n               city={city} \n               tribe={tribe}\n               data={ geographicData }\n               tribes={ granteeTribes }\n               showResults={ showResults }/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}